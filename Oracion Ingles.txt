in computer science , the analysis of algorithms is the process of finding the computational complexity of algorithms - the amount of time , storage , or other resources needed to execute them . usually , this involves determining a function that relates the length of an algorithm input to the number of steps it takes ( its time complexity ) or the number of storage locations it uses ( its space complexity ) . an algorithm is said to be efficient when this function values are small , or grow slowly compared to a growth in the size of the input . different inputs of the same length may cause the algorithm to have different behavior , so best , worst and average case descriptions might all be of practical interest . when not otherwise specified , the function describing the performance of an algorithm is usually an upper bound , determined from the worst case inputs to the algorithm . the term " analysis of algorithms " was coined by Donald Knuth . algorithm analysis is an important part of a broader computational complexity theory , which provides theoretical estimates for the resources needed by any algorithm which solves a given computational problem . these estimates provide an insight into reasonable directions of search for efficient algorithms . 